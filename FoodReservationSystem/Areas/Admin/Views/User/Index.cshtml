@model List<FoodReservation.Application.Services.Users.Queries.GetUserDto>

@{
    ViewData["Title"] = "لیست کاربران";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<link rel="stylesheet" href="~/css/admin-user-list.css?v=@DateTime.Now.Ticks" />
<link rel="stylesheet" href="~/Sweetalert2/Sweetalert2.min.css?v=@DateTime.Now.Ticks" />

<div class="user-list-container">
    <div class="header-section">
        <h3>📋 لیست کاربران ثبت‌نام‌شده</h3>
        <a href="/Admin/User/Register" class="btn-add">➕ ثبت کاربر جدید</a>
    </div>

    @if (Model == null || !Model.Any())
    {
        <div class="no-data">هیچ کاربری ثبت نشده است ❗</div>
    }
    else
    {
        <div class="table-wrapper">
            <table class="user-table">
                <thead>
                    <tr>
                        <th>ردیف</th>
                        <th>شماره دانشجویی</th>
                        <th>نام و نام خانوادگی</th>
                        <th>نقش</th>
                        <th>عملیات</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model.Select((x, i) => new { x, i }))
                    {
                        <tr id="row-@user.x.Id">
                            <td>@(@user.i + 1)</td>
                            <td>@user.x.StudentNumber</td>
                            <td>@user.x.FullName</td>
                            <td>
                                <span class="badge @(user.x.Role == "Admin" ? "badge-admin" : "badge-student")">
                                    @(user.x.Role == "Admin" ? "ادمین" : "دانشجو")
                                </span>
                            </td>
                            <td class="actions">
                                <button class="btn-edit" data-id="@user.x.Id">✏️ ویرایش</button>
                                <button class="btn-delete" data-id="@user.x.Id">🗑️ حذف</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- ✅ پنل ویرایش -->
<div id="editPanel" class="edit-panel">
    <div class="panel-content">
        <h4>✏️ ویرایش اطلاعات کاربر</h4>
        <form id="editUserForm">
            <input type="hidden" id="editUserId" />

            <label>شماره دانشجویی:</label>
            <input type="text" id="editStudentNumber" />

            <label>نام و نام خانوادگی:</label>
            <input type="text" id="editFullName" />

            <label>نقش:</label>
            <select id="editRole">
                <option value="0">دانشجو</option>
                <option value="1">ادمین</option>
            </select>

            <div class="panel-buttons">
                <button type="button" id="cancelEdit">❌ انصراف</button>
                <button type="submit" id="saveEdit">💾 ذخیره</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="~/Sweetalert2/Sweetalert2.min.js"></script>

    <script>
        // 🗑️ حذف کاربر با SweetAlert2
        document.querySelectorAll('.btn-delete').forEach(btn => {
            btn.addEventListener('click', function () {
                const id = this.dataset.id;

                Swal.fire({
                    title: 'حذف کاربر؟',
                    text: "آیا از حذف این کاربر مطمئن هستید؟",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'بله، حذف شود',
                    cancelButtonText: 'انصراف'
                }).then(result => {
                    if (result.isConfirmed) {
                        fetch(`/Admin/User/Remove`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ id: parseInt(id) })
                        })
                        .then(res => res.json())
                        .then(r => {
                            Swal.fire(r.isSuccess ? '✅ موفق' : '❌ خطا', r.message, r.isSuccess ? 'success' : 'error');
                            if (r.isSuccess) document.getElementById(`row-${id}`).remove();
                        })
                        .catch(() => Swal.fire('خطا', 'در حذف کاربر مشکلی پیش آمد', 'error'));
                    }
                });
            });
        });

        // ✏️ باز کردن پنل ویرایش
        document.querySelectorAll('.btn-edit').forEach(btn => {
            btn.addEventListener('click', function () {
                const id = this.dataset.id;

                fetch(`/Admin/User/Edit?id=${id}`)
                    .then(res => res.json())
                    .then(data => {
                        if (data.error) {
                            Swal.fire('خطا', data.error, 'error');
                            return;
                        }

                        document.getElementById('editUserId').value = data.id;
                        document.getElementById('editStudentNumber').value = data.studentNumber;
                        document.getElementById('editFullName').value = data.fullName;
                        document.getElementById('editRole').value = data.role;
                        document.getElementById('editPanel').classList.add('show');
                    })
                    .catch(() => Swal.fire('خطا', '❌ خطا در دریافت اطلاعات کاربر', 'error'));
            });
        });

        // ❌ بستن پنل
        document.getElementById('cancelEdit').addEventListener('click', () => {
            document.getElementById('editPanel').classList.remove('show');
        });

        // 💾 ذخیره تغییرات
        document.getElementById('editUserForm').addEventListener('submit', e => {
            e.preventDefault();

            const data = {
                id: document.getElementById('editUserId').value,
                studentNumber: document.getElementById('editStudentNumber').value,
                fullName: document.getElementById('editFullName').value,
                role: parseInt(document.getElementById('editRole').value)
            };

            fetch('/Admin/User/Edit', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(res => res.json())
            .then(r => {
                Swal.fire(r.isSuccess ? '✅ موفق' : '❌ خطا', r.message, r.isSuccess ? 'success' : 'error')
                    .then(() => { if (r.isSuccess) location.reload(); });
            })
            .catch(() => Swal.fire('خطا', 'در ذخیره تغییرات مشکلی پیش آمد', 'error'));
        });
    </script>
}
